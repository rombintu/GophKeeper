// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	auth "github.com/rombintu/GophKeeper/internal/proto/auth"
	keeper "github.com/rombintu/GophKeeper/internal/proto/keeper"
)

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDriver) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDriverMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDriver)(nil).Close), ctx)
}

// Configure mocks base method.
func (m *MockDriver) Configure(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockDriverMockRecorder) Configure(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockDriver)(nil).Configure), ctx)
}

// Open mocks base method.
func (m *MockDriver) Open(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockDriverMockRecorder) Open(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDriver)(nil).Open), ctx)
}

// Ping mocks base method.
func (m *MockDriver) Ping(ctx context.Context, monitoring bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, monitoring)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDriverMockRecorder) Ping(ctx, monitoring interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDriver)(nil).Ping), ctx, monitoring)
}

// MockUserManager is a mock of UserManager interface.
type MockUserManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagerMockRecorder
}

// MockUserManagerMockRecorder is the mock recorder for MockUserManager.
type MockUserManagerMockRecorder struct {
	mock *MockUserManager
}

// NewMockUserManager creates a new mock instance.
func NewMockUserManager(ctrl *gomock.Controller) *MockUserManager {
	mock := &MockUserManager{ctrl: ctrl}
	mock.recorder = &MockUserManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManager) EXPECT() *MockUserManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockUserManager) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockUserManagerMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUserManager)(nil).Close), ctx)
}

// Configure mocks base method.
func (m *MockUserManager) Configure(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockUserManagerMockRecorder) Configure(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockUserManager)(nil).Configure), ctx)
}

// Open mocks base method.
func (m *MockUserManager) Open(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockUserManagerMockRecorder) Open(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockUserManager)(nil).Open), ctx)
}

// Ping mocks base method.
func (m *MockUserManager) Ping(ctx context.Context, monitoring bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, monitoring)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockUserManagerMockRecorder) Ping(ctx, monitoring interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockUserManager)(nil).Ping), ctx, monitoring)
}

// UserCreate mocks base method.
func (m *MockUserManager) UserCreate(ctx context.Context, user *auth.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreate", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserCreate indicates an expected call of UserCreate.
func (mr *MockUserManagerMockRecorder) UserCreate(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreate", reflect.TypeOf((*MockUserManager)(nil).UserCreate), ctx, user)
}

// UserGet mocks base method.
func (m *MockUserManager) UserGet(ctx context.Context, user *auth.User) (*auth.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGet", ctx, user)
	ret0, _ := ret[0].(*auth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGet indicates an expected call of UserGet.
func (mr *MockUserManagerMockRecorder) UserGet(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGet", reflect.TypeOf((*MockUserManager)(nil).UserGet), ctx, user)
}

// MockSecretManager is a mock of SecretManager interface.
type MockSecretManager struct {
	ctrl     *gomock.Controller
	recorder *MockSecretManagerMockRecorder
}

// MockSecretManagerMockRecorder is the mock recorder for MockSecretManager.
type MockSecretManagerMockRecorder struct {
	mock *MockSecretManager
}

// NewMockSecretManager creates a new mock instance.
func NewMockSecretManager(ctrl *gomock.Controller) *MockSecretManager {
	mock := &MockSecretManager{ctrl: ctrl}
	mock.recorder = &MockSecretManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretManager) EXPECT() *MockSecretManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSecretManager) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSecretManagerMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSecretManager)(nil).Close), ctx)
}

// Configure mocks base method.
func (m *MockSecretManager) Configure(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockSecretManagerMockRecorder) Configure(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockSecretManager)(nil).Configure), ctx)
}

// Open mocks base method.
func (m *MockSecretManager) Open(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockSecretManagerMockRecorder) Open(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockSecretManager)(nil).Open), ctx)
}

// Ping mocks base method.
func (m *MockSecretManager) Ping(ctx context.Context, monitoring bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, monitoring)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockSecretManagerMockRecorder) Ping(ctx, monitoring interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockSecretManager)(nil).Ping), ctx, monitoring)
}

// SecretCreate mocks base method.
func (m *MockSecretManager) SecretCreate(ctx context.Context, secret *keeper.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretCreate", ctx, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecretCreate indicates an expected call of SecretCreate.
func (mr *MockSecretManagerMockRecorder) SecretCreate(ctx, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretCreate", reflect.TypeOf((*MockSecretManager)(nil).SecretCreate), ctx, secret)
}

// SecretCreateBatch mocks base method.
func (m *MockSecretManager) SecretCreateBatch(ctx context.Context, secrets []*keeper.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretCreateBatch", ctx, secrets)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecretCreateBatch indicates an expected call of SecretCreateBatch.
func (mr *MockSecretManagerMockRecorder) SecretCreateBatch(ctx, secrets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretCreateBatch", reflect.TypeOf((*MockSecretManager)(nil).SecretCreateBatch), ctx, secrets)
}

// SecretGetBatch mocks base method.
func (m *MockSecretManager) SecretGetBatch(ctx context.Context) ([]*keeper.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretGetBatch", ctx)
	ret0, _ := ret[0].([]*keeper.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretGetBatch indicates an expected call of SecretGetBatch.
func (mr *MockSecretManagerMockRecorder) SecretGetBatch(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretGetBatch", reflect.TypeOf((*MockSecretManager)(nil).SecretGetBatch), ctx)
}

// SecretList mocks base method.
func (m *MockSecretManager) SecretList(ctx context.Context, userEmail string) ([]*keeper.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretList", ctx, userEmail)
	ret0, _ := ret[0].([]*keeper.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretList indicates an expected call of SecretList.
func (mr *MockSecretManagerMockRecorder) SecretList(ctx, userEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretList", reflect.TypeOf((*MockSecretManager)(nil).SecretList), ctx, userEmail)
}

// SecretPurge mocks base method.
func (m *MockSecretManager) SecretPurge(ctx context.Context, secret *keeper.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretPurge", ctx, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecretPurge indicates an expected call of SecretPurge.
func (mr *MockSecretManagerMockRecorder) SecretPurge(ctx, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretPurge", reflect.TypeOf((*MockSecretManager)(nil).SecretPurge), ctx, secret)
}

// MockClientManager is a mock of ClientManager interface.
type MockClientManager struct {
	ctrl     *gomock.Controller
	recorder *MockClientManagerMockRecorder
}

// MockClientManagerMockRecorder is the mock recorder for MockClientManager.
type MockClientManagerMockRecorder struct {
	mock *MockClientManager
}

// NewMockClientManager creates a new mock instance.
func NewMockClientManager(ctrl *gomock.Controller) *MockClientManager {
	mock := &MockClientManager{ctrl: ctrl}
	mock.recorder = &MockClientManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientManager) EXPECT() *MockClientManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClientManager) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientManagerMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientManager)(nil).Close), ctx)
}

// Configure mocks base method.
func (m *MockClientManager) Configure(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockClientManagerMockRecorder) Configure(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockClientManager)(nil).Configure), ctx)
}

// Get mocks base method.
func (m *MockClientManager) Get(ctx context.Context, key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientManagerMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClientManager)(nil).Get), ctx, key)
}

// GetMap mocks base method.
func (m *MockClientManager) GetMap(ctx context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMap", ctx)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMap indicates an expected call of GetMap.
func (mr *MockClientManagerMockRecorder) GetMap(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMap", reflect.TypeOf((*MockClientManager)(nil).GetMap), ctx)
}

// Open mocks base method.
func (m *MockClientManager) Open(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockClientManagerMockRecorder) Open(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockClientManager)(nil).Open), ctx)
}

// Ping mocks base method.
func (m *MockClientManager) Ping(ctx context.Context, monitoring bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, monitoring)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockClientManagerMockRecorder) Ping(ctx, monitoring interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockClientManager)(nil).Ping), ctx, monitoring)
}

// SecretCreate mocks base method.
func (m *MockClientManager) SecretCreate(ctx context.Context, secret *keeper.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretCreate", ctx, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecretCreate indicates an expected call of SecretCreate.
func (mr *MockClientManagerMockRecorder) SecretCreate(ctx, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretCreate", reflect.TypeOf((*MockClientManager)(nil).SecretCreate), ctx, secret)
}

// SecretCreateBatch mocks base method.
func (m *MockClientManager) SecretCreateBatch(ctx context.Context, secrets []*keeper.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretCreateBatch", ctx, secrets)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecretCreateBatch indicates an expected call of SecretCreateBatch.
func (mr *MockClientManagerMockRecorder) SecretCreateBatch(ctx, secrets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretCreateBatch", reflect.TypeOf((*MockClientManager)(nil).SecretCreateBatch), ctx, secrets)
}

// SecretGetBatch mocks base method.
func (m *MockClientManager) SecretGetBatch(ctx context.Context) ([]*keeper.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretGetBatch", ctx)
	ret0, _ := ret[0].([]*keeper.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretGetBatch indicates an expected call of SecretGetBatch.
func (mr *MockClientManagerMockRecorder) SecretGetBatch(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretGetBatch", reflect.TypeOf((*MockClientManager)(nil).SecretGetBatch), ctx)
}

// SecretList mocks base method.
func (m *MockClientManager) SecretList(ctx context.Context, userEmail string) ([]*keeper.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretList", ctx, userEmail)
	ret0, _ := ret[0].([]*keeper.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretList indicates an expected call of SecretList.
func (mr *MockClientManagerMockRecorder) SecretList(ctx, userEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretList", reflect.TypeOf((*MockClientManager)(nil).SecretList), ctx, userEmail)
}

// SecretPurge mocks base method.
func (m *MockClientManager) SecretPurge(ctx context.Context, secret *keeper.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretPurge", ctx, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecretPurge indicates an expected call of SecretPurge.
func (mr *MockClientManagerMockRecorder) SecretPurge(ctx, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretPurge", reflect.TypeOf((*MockClientManager)(nil).SecretPurge), ctx, secret)
}

// Set mocks base method.
func (m *MockClientManager) Set(ctx context.Context, key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockClientManagerMockRecorder) Set(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockClientManager)(nil).Set), ctx, key, value)
}
